
encoder_zadanie8_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000404  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800059c  080005a4  000105a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800059c  0800059c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005a0  080005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000105a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  080005a4  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000020  080005a4  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000105a4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002823  00000000  00000000  000105d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000457  00000000  00000000  00012df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000a8  00000000  00000000  00013250  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000132f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000064e  00000000  00000000  00013368  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c03  00000000  00000000  000139b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000165b9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000164  00000000  00000000  00016638  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001679c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000584 	.word	0x08000584

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000584 	.word	0x08000584

080001d8 <gpio_pin_cfg>:
 */


#include "conf_gpio.h"

void gpio_pin_cfg(GPIO_TypeDef * const __restrict__ port, GpioPin_t pin, GpioMode_t mode){
 80001d8:	b480      	push	{r7}
 80001da:	b087      	sub	sp, #28
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	807b      	strh	r3, [r7, #2]
 80001e4:	4613      	mov	r3, r2
 80001e6:	803b      	strh	r3, [r7, #0]
	if (mode & 0x100u) port->OTYPER |= pin;
 80001e8:	883b      	ldrh	r3, [r7, #0]
 80001ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d006      	beq.n	8000200 <gpio_pin_cfg+0x28>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	685a      	ldr	r2, [r3, #4]
 80001f6:	887b      	ldrh	r3, [r7, #2]
 80001f8:	431a      	orrs	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	e006      	b.n	800020e <gpio_pin_cfg+0x36>
	else port->OTYPER &= (uint32_t)~pin;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	887a      	ldrh	r2, [r7, #2]
 8000206:	43d2      	mvns	r2, r2
 8000208:	401a      	ands	r2, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	605a      	str	r2, [r3, #4]

	pin = __builtin_ctz(pin)*2;
 800020e:	887b      	ldrh	r3, [r7, #2]
 8000210:	fa93 f3a3 	rbit	r3, r3
 8000214:	fab3 f383 	clz	r3, r3
 8000218:	b29b      	uxth	r3, r3
 800021a:	005b      	lsls	r3, r3, #1
 800021c:	807b      	strh	r3, [r7, #2]

	uint32_t reset_mask = ~(0x03u << pin);
 800021e:	887b      	ldrh	r3, [r7, #2]
 8000220:	2203      	movs	r2, #3
 8000222:	fa02 f303 	lsl.w	r3, r2, r3
 8000226:	43db      	mvns	r3, r3
 8000228:	613b      	str	r3, [r7, #16]
	uint32_t reg_val;

	reg_val = port->MODER;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	4013      	ands	r3, r2
 8000236:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x600u) >> 9u) << pin );
 8000238:	883b      	ldrh	r3, [r7, #0]
 800023a:	0a5b      	lsrs	r3, r3, #9
 800023c:	f003 0203 	and.w	r2, r3, #3
 8000240:	887b      	ldrh	r3, [r7, #2]
 8000242:	fa02 f303 	lsl.w	r3, r2, r3
 8000246:	68fa      	ldr	r2, [r7, #12]
 8000248:	4313      	orrs	r3, r2
 800024a:	60fb      	str	r3, [r7, #12]

	port->MODER = reg_val;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	68fa      	ldr	r2, [r7, #12]
 8000250:	601a      	str	r2, [r3, #0]
	reg_val = port->PUPDR;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	4013      	ands	r3, r2
 800025e:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x30u) >> 4u) << pin );
 8000260:	883b      	ldrh	r3, [r7, #0]
 8000262:	091b      	lsrs	r3, r3, #4
 8000264:	f003 0203 	and.w	r2, r3, #3
 8000268:	887b      	ldrh	r3, [r7, #2]
 800026a:	fa02 f303 	lsl.w	r3, r2, r3
 800026e:	68fa      	ldr	r2, [r7, #12]
 8000270:	4313      	orrs	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]

	port->PUPDR = reg_val;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	60da      	str	r2, [r3, #12]
	reg_val = port->OSPEEDR;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	4013      	ands	r3, r2
 8000286:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0xC0u) >> 6u) << pin);
 8000288:	883b      	ldrh	r3, [r7, #0]
 800028a:	099b      	lsrs	r3, r3, #6
 800028c:	f003 0203 	and.w	r2, r3, #3
 8000290:	887b      	ldrh	r3, [r7, #2]
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	4313      	orrs	r3, r2
 800029a:	60fb      	str	r3, [r7, #12]

	port->OSPEEDR = reg_val;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68fa      	ldr	r2, [r7, #12]
 80002a0:	609a      	str	r2, [r3, #8]
	volatile uint32_t * reg_adr;
	reg_adr = &port->AFR[0];
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3320      	adds	r3, #32
 80002a6:	617b      	str	r3, [r7, #20]
	pin*=2;
 80002a8:	887b      	ldrh	r3, [r7, #2]
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	807b      	strh	r3, [r7, #2]

	if ( pin > 28){
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	2b1c      	cmp	r3, #28
 80002b2:	d905      	bls.n	80002c0 <gpio_pin_cfg+0xe8>
		pin -= 32;
 80002b4:	887b      	ldrh	r3, [r7, #2]
 80002b6:	3b20      	subs	r3, #32
 80002b8:	807b      	strh	r3, [r7, #2]
		reg_adr = &port->AFR[1];
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3324      	adds	r3, #36	; 0x24
 80002be:	617b      	str	r3, [r7, #20]
	}
	reg_val = *reg_adr;
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	60fb      	str	r3, [r7, #12]
	reg_val &= ~(0x0fu << pin);
 80002c6:	887b      	ldrh	r3, [r7, #2]
 80002c8:	220f      	movs	r2, #15
 80002ca:	fa02 f303 	lsl.w	r3, r2, r3
 80002ce:	43db      	mvns	r3, r3
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	4013      	ands	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
	reg_val |= (uint32_t)(mode & 0x0ful) << pin;
 80002d6:	883b      	ldrh	r3, [r7, #0]
 80002d8:	f003 020f 	and.w	r2, r3, #15
 80002dc:	887b      	ldrh	r3, [r7, #2]
 80002de:	fa02 f303 	lsl.w	r3, r2, r3
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	60fb      	str	r3, [r7, #12]
	*reg_adr = reg_val;
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	601a      	str	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	371c      	adds	r7, #28
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
	...

080002fc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000306:	4909      	ldr	r1, [pc, #36]	; (800032c <NVIC_EnableIRQ+0x30>)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	095b      	lsrs	r3, r3, #5
 800030e:	79fa      	ldrb	r2, [r7, #7]
 8000310:	f002 021f 	and.w	r2, r2, #31
 8000314:	2001      	movs	r0, #1
 8000316:	fa00 f202 	lsl.w	r2, r0, r2
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000e100 	.word	0xe000e100

08000330 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800033a:	4909      	ldr	r1, [pc, #36]	; (8000360 <NVIC_ClearPendingIRQ+0x30>)
 800033c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000340:	095b      	lsrs	r3, r3, #5
 8000342:	79fa      	ldrb	r2, [r7, #7]
 8000344:	f002 021f 	and.w	r2, r2, #31
 8000348:	2001      	movs	r0, #1
 800034a:	fa00 f202 	lsl.w	r2, r0, r2
 800034e:	3360      	adds	r3, #96	; 0x60
 8000350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000e100 	.word	0xe000e100

08000364 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
  int i = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	607b      	str	r3, [r7, #4]

  RCC -> AHB1ENR = RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOAEN;
 800036e:	4b2d      	ldr	r3, [pc, #180]	; (8000424 <main+0xc0>)
 8000370:	2203      	movs	r2, #3
 8000372:	631a      	str	r2, [r3, #48]	; 0x30
  RCC -> APB2ENR = RCC_APB2ENR_TIM1EN;
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <main+0xc0>)
 8000376:	2201      	movs	r2, #1
 8000378:	645a      	str	r2, [r3, #68]	; 0x44
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800037a:	f3bf 8f4f 	dsb	sy
  __DSB();
  gpio_pin_cfg(GPIOB, PB13, gpio_mode_output_PP_LS);	//blue
 800037e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000386:	4828      	ldr	r0, [pc, #160]	; (8000428 <main+0xc4>)
 8000388:	f7ff ff26 	bl	80001d8 <gpio_pin_cfg>
  gpio_pin_cfg(GPIOA, PA8, gpio_mode_AF1_PP_LS);
 800038c:	f240 4201 	movw	r2, #1025	; 0x401
 8000390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000394:	4825      	ldr	r0, [pc, #148]	; (800042c <main+0xc8>)
 8000396:	f7ff ff1f 	bl	80001d8 <gpio_pin_cfg>
  gpio_pin_cfg(GPIOA, PA9, gpio_mode_AF1_PP_LS);
 800039a:	f240 4201 	movw	r2, #1025	; 0x401
 800039e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a2:	4822      	ldr	r0, [pc, #136]	; (800042c <main+0xc8>)
 80003a4:	f7ff ff18 	bl	80001d8 <gpio_pin_cfg>

  //BB(GPIOA -> ODR, PA8) = 1;
  //BB(GPIOA -> ODR, PA9) = 1;
  BB(GPIOB -> ODR, PB13) ^= 1;
 80003a8:	4a21      	ldr	r2, [pc, #132]	; (8000430 <main+0xcc>)
 80003aa:	4b21      	ldr	r3, [pc, #132]	; (8000430 <main+0xcc>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f083 0301 	eor.w	r3, r3, #1
 80003b2:	6013      	str	r3, [r2, #0]

  TIM1 -> PSC = 0;
 80003b4:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <main+0xd0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
  TIM1 -> ARR = 9;				//Counter Period
 80003ba:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <main+0xd0>)
 80003bc:	2209      	movs	r2, #9
 80003be:	62da      	str	r2, [r3, #44]	; 0x2c

  TIM1 -> CCMR1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0; //input mode: IC1FP1 is mapped to TI1 etc
 80003c0:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <main+0xd0>)
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <main+0xd0>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	6193      	str	r3, [r2, #24]

  TIM1 -> CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E; //encoder enable
 80003d0:	4a18      	ldr	r2, [pc, #96]	; (8000434 <main+0xd0>)
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <main+0xd0>)
 80003d4:	6a1b      	ldr	r3, [r3, #32]
 80003d6:	f043 0311 	orr.w	r3, r3, #17
 80003da:	6213      	str	r3, [r2, #32]

  TIM1 -> SMCR |= TIM_SMCR_TS_2;
 80003dc:	4a15      	ldr	r2, [pc, #84]	; (8000434 <main+0xd0>)
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <main+0xd0>)
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e6:	6093      	str	r3, [r2, #8]
  TIM1 -> SMCR |= TIM_SMCR_SMS_1;// | TIM_SMCR_SMS_0; //encoder mode on channel 1
 80003e8:	4a12      	ldr	r2, [pc, #72]	; (8000434 <main+0xd0>)
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <main+0xd0>)
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f043 0302 	orr.w	r3, r3, #2
 80003f2:	6093      	str	r3, [r2, #8]


  TIM1 -> DIER = TIM_DIER_UIE;	//Update Interrupt enable
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <main+0xd0>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	60da      	str	r2, [r3, #12]

  TIM1 -> CR1 = TIM_CR1_CEN;		//Timer activation
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <main+0xd0>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	601a      	str	r2, [r3, #0]

  NVIC_ClearPendingIRQ(TIM1_UP_TIM10_IRQn);
 8000400:	2019      	movs	r0, #25
 8000402:	f7ff ff95 	bl	8000330 <NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000406:	2019      	movs	r0, #25
 8000408:	f7ff ff78 	bl	80002fc <NVIC_EnableIRQ>

  /* Infinite loop */
  while (1)
  {
	i++;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3301      	adds	r3, #1
 8000410:	607b      	str	r3, [r7, #4]
	counterRealValue = TIM1 -> CNT;
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <main+0xd0>)
 8000414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000416:	461a      	mov	r2, r3
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <main+0xd4>)
 800041a:	601a      	str	r2, [r3, #0]

	if ((GPIOA -> IDR, PA8) == 1)
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <main+0xc8>)
 800041e:	691b      	ldr	r3, [r3, #16]
	i++;
 8000420:	e7f4      	b.n	800040c <main+0xa8>
 8000422:	bf00      	nop
 8000424:	40023800 	.word	0x40023800
 8000428:	40020400 	.word	0x40020400
 800042c:	40020000 	.word	0x40020000
 8000430:	424082b4 	.word	0x424082b4
 8000434:	40010000 	.word	0x40010000
 8000438:	2000001c 	.word	0x2000001c

0800043c <TIM1_UP_TIM10_IRQHandler>:

  }
}

__attribute__((interrupt)) void TIM1_UP_TIM10_IRQHandler(void)
{
 800043c:	4668      	mov	r0, sp
 800043e:	f020 0107 	bic.w	r1, r0, #7
 8000442:	468d      	mov	sp, r1
 8000444:	b481      	push	{r0, r7}
 8000446:	af00      	add	r7, sp, #0
	if (TIM1->SR & TIM_SR_UIF)
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <TIM1_UP_TIM10_IRQHandler+0x38>)
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	f003 0301 	and.w	r3, r3, #1
 8000450:	2b00      	cmp	r3, #0
 8000452:	d009      	beq.n	8000468 <TIM1_UP_TIM10_IRQHandler+0x2c>
	{
		TIM1->SR = ~TIM_SR_UIF;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8000456:	f06f 0201 	mvn.w	r2, #1
 800045a:	611a      	str	r2, [r3, #16]
		BB(GPIOB -> ODR, PB13) ^= 1;
 800045c:	4a06      	ldr	r2, [pc, #24]	; (8000478 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f083 0301 	eor.w	r3, r3, #1
 8000466:	6013      	str	r3, [r2, #0]
	}
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc81      	pop	{r0, r7}
 800046e:	4685      	mov	sp, r0
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40010000 	.word	0x40010000
 8000478:	424082b4 	.word	0x424082b4

0800047c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800047c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000480:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000482:	e003      	b.n	800048c <LoopCopyDataInit>

08000484 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000486:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000488:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800048a:	3104      	adds	r1, #4

0800048c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800048c:	480b      	ldr	r0, [pc, #44]	; (80004bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000490:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000492:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000494:	d3f6      	bcc.n	8000484 <CopyDataInit>
  ldr  r2, =_sbss
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000498:	e002      	b.n	80004a0 <LoopFillZerobss>

0800049a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800049a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800049c:	f842 3b04 	str.w	r3, [r2], #4

080004a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004a4:	d3f9      	bcc.n	800049a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004a6:	f000 f813 	bl	80004d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004aa:	f000 f847 	bl	800053c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ae:	f7ff ff59 	bl	8000364 <main>
  bx  lr    
 80004b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004b8:	080005a4 	.word	0x080005a4
  ldr  r0, =_sdata
 80004bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004c0:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80004c4:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80004c8:	20000020 	.word	0x20000020

080004cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>
	...

080004d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d4:	4a16      	ldr	r2, [pc, #88]	; (8000530 <SystemInit+0x60>)
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <SystemInit+0x60>)
 80004d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <SystemInit+0x64>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <SystemInit+0x64>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <SystemInit+0x64>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004f6:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <SystemInit+0x64>)
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <SystemInit+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000504:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <SystemInit+0x64>)
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <SystemInit+0x68>)
 800050a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800050c:	4a09      	ldr	r2, [pc, #36]	; (8000534 <SystemInit+0x64>)
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <SystemInit+0x64>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000516:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <SystemInit+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <SystemInit+0x60>)
 8000520:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000524:	609a      	str	r2, [r3, #8]
#endif
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	e000ed00 	.word	0xe000ed00
 8000534:	40023800 	.word	0x40023800
 8000538:	24003010 	.word	0x24003010

0800053c <__libc_init_array>:
 800053c:	b570      	push	{r4, r5, r6, lr}
 800053e:	4e0d      	ldr	r6, [pc, #52]	; (8000574 <__libc_init_array+0x38>)
 8000540:	4c0d      	ldr	r4, [pc, #52]	; (8000578 <__libc_init_array+0x3c>)
 8000542:	1ba4      	subs	r4, r4, r6
 8000544:	10a4      	asrs	r4, r4, #2
 8000546:	2500      	movs	r5, #0
 8000548:	42a5      	cmp	r5, r4
 800054a:	d109      	bne.n	8000560 <__libc_init_array+0x24>
 800054c:	4e0b      	ldr	r6, [pc, #44]	; (800057c <__libc_init_array+0x40>)
 800054e:	4c0c      	ldr	r4, [pc, #48]	; (8000580 <__libc_init_array+0x44>)
 8000550:	f000 f818 	bl	8000584 <_init>
 8000554:	1ba4      	subs	r4, r4, r6
 8000556:	10a4      	asrs	r4, r4, #2
 8000558:	2500      	movs	r5, #0
 800055a:	42a5      	cmp	r5, r4
 800055c:	d105      	bne.n	800056a <__libc_init_array+0x2e>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000564:	4798      	blx	r3
 8000566:	3501      	adds	r5, #1
 8000568:	e7ee      	b.n	8000548 <__libc_init_array+0xc>
 800056a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800056e:	4798      	blx	r3
 8000570:	3501      	adds	r5, #1
 8000572:	e7f2      	b.n	800055a <__libc_init_array+0x1e>
 8000574:	0800059c 	.word	0x0800059c
 8000578:	0800059c 	.word	0x0800059c
 800057c:	0800059c 	.word	0x0800059c
 8000580:	080005a0 	.word	0x080005a0

08000584 <_init>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	bf00      	nop
 8000588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058a:	bc08      	pop	{r3}
 800058c:	469e      	mov	lr, r3
 800058e:	4770      	bx	lr

08000590 <_fini>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	bf00      	nop
 8000594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000596:	bc08      	pop	{r3}
 8000598:	469e      	mov	lr, r3
 800059a:	4770      	bx	lr
