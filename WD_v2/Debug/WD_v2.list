
WD_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000042c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c4  080005cc  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005c8  080005c8  000105c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000105cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  080005cc  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000020  080005cc  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002943  00000000  00000000  000105fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000458  00000000  00000000  00012f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000a8  00000000  00000000  00013398  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00013440  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000065f  00000000  00000000  000134b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002bd5  00000000  00000000  00013b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000166e4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000015c  00000000  00000000  00016760  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000168bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005ac 	.word	0x080005ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080005ac 	.word	0x080005ac

080001d8 <gpio_pin_cfg>:
 */


#include "conf_gpio.h"

void gpio_pin_cfg(GPIO_TypeDef * const __restrict__ port, GpioPin_t pin, GpioMode_t mode){
 80001d8:	b480      	push	{r7}
 80001da:	b087      	sub	sp, #28
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	807b      	strh	r3, [r7, #2]
 80001e4:	4613      	mov	r3, r2
 80001e6:	803b      	strh	r3, [r7, #0]
	if (mode & 0x100u) port->OTYPER |= pin;
 80001e8:	883b      	ldrh	r3, [r7, #0]
 80001ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d006      	beq.n	8000200 <gpio_pin_cfg+0x28>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	685a      	ldr	r2, [r3, #4]
 80001f6:	887b      	ldrh	r3, [r7, #2]
 80001f8:	431a      	orrs	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	e006      	b.n	800020e <gpio_pin_cfg+0x36>
	else port->OTYPER &= (uint32_t)~pin;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	887a      	ldrh	r2, [r7, #2]
 8000206:	43d2      	mvns	r2, r2
 8000208:	401a      	ands	r2, r3
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	605a      	str	r2, [r3, #4]

	pin = __builtin_ctz(pin)*2;
 800020e:	887b      	ldrh	r3, [r7, #2]
 8000210:	fa93 f3a3 	rbit	r3, r3
 8000214:	fab3 f383 	clz	r3, r3
 8000218:	b29b      	uxth	r3, r3
 800021a:	005b      	lsls	r3, r3, #1
 800021c:	807b      	strh	r3, [r7, #2]

	uint32_t reset_mask = ~(0x03u << pin);
 800021e:	887b      	ldrh	r3, [r7, #2]
 8000220:	2203      	movs	r2, #3
 8000222:	fa02 f303 	lsl.w	r3, r2, r3
 8000226:	43db      	mvns	r3, r3
 8000228:	613b      	str	r3, [r7, #16]
	uint32_t reg_val;

	reg_val = port->MODER;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	4013      	ands	r3, r2
 8000236:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x600u) >> 9u) << pin );
 8000238:	883b      	ldrh	r3, [r7, #0]
 800023a:	0a5b      	lsrs	r3, r3, #9
 800023c:	f003 0203 	and.w	r2, r3, #3
 8000240:	887b      	ldrh	r3, [r7, #2]
 8000242:	fa02 f303 	lsl.w	r3, r2, r3
 8000246:	68fa      	ldr	r2, [r7, #12]
 8000248:	4313      	orrs	r3, r2
 800024a:	60fb      	str	r3, [r7, #12]

	port->MODER = reg_val;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	68fa      	ldr	r2, [r7, #12]
 8000250:	601a      	str	r2, [r3, #0]
	reg_val = port->PUPDR;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	693b      	ldr	r3, [r7, #16]
 800025c:	4013      	ands	r3, r2
 800025e:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x30u) >> 4u) << pin );
 8000260:	883b      	ldrh	r3, [r7, #0]
 8000262:	091b      	lsrs	r3, r3, #4
 8000264:	f003 0203 	and.w	r2, r3, #3
 8000268:	887b      	ldrh	r3, [r7, #2]
 800026a:	fa02 f303 	lsl.w	r3, r2, r3
 800026e:	68fa      	ldr	r2, [r7, #12]
 8000270:	4313      	orrs	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]

	port->PUPDR = reg_val;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	60da      	str	r2, [r3, #12]
	reg_val = port->OSPEEDR;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	4013      	ands	r3, r2
 8000286:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0xC0u) >> 6u) << pin);
 8000288:	883b      	ldrh	r3, [r7, #0]
 800028a:	099b      	lsrs	r3, r3, #6
 800028c:	f003 0203 	and.w	r2, r3, #3
 8000290:	887b      	ldrh	r3, [r7, #2]
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	4313      	orrs	r3, r2
 800029a:	60fb      	str	r3, [r7, #12]

	port->OSPEEDR = reg_val;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68fa      	ldr	r2, [r7, #12]
 80002a0:	609a      	str	r2, [r3, #8]
	volatile uint32_t * reg_adr;
	reg_adr = &port->AFR[0];
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3320      	adds	r3, #32
 80002a6:	617b      	str	r3, [r7, #20]
	pin*=2;
 80002a8:	887b      	ldrh	r3, [r7, #2]
 80002aa:	005b      	lsls	r3, r3, #1
 80002ac:	807b      	strh	r3, [r7, #2]

	if ( pin > 28){
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	2b1c      	cmp	r3, #28
 80002b2:	d905      	bls.n	80002c0 <gpio_pin_cfg+0xe8>
		pin -= 32;
 80002b4:	887b      	ldrh	r3, [r7, #2]
 80002b6:	3b20      	subs	r3, #32
 80002b8:	807b      	strh	r3, [r7, #2]
		reg_adr = &port->AFR[1];
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3324      	adds	r3, #36	; 0x24
 80002be:	617b      	str	r3, [r7, #20]
	}
	reg_val = *reg_adr;
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	60fb      	str	r3, [r7, #12]
	reg_val &= ~(0x0fu << pin);
 80002c6:	887b      	ldrh	r3, [r7, #2]
 80002c8:	220f      	movs	r2, #15
 80002ca:	fa02 f303 	lsl.w	r3, r2, r3
 80002ce:	43db      	mvns	r3, r3
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	4013      	ands	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
	reg_val |= (uint32_t)(mode & 0x0ful) << pin;
 80002d6:	883b      	ldrh	r3, [r7, #0]
 80002d8:	f003 020f 	and.w	r2, r3, #15
 80002dc:	887b      	ldrh	r3, [r7, #2]
 80002de:	fa02 f303 	lsl.w	r3, r2, r3
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	60fb      	str	r3, [r7, #12]
	*reg_adr = reg_val;
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	601a      	str	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	371c      	adds	r7, #28
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
	...

080002fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	da0b      	bge.n	8000328 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	490d      	ldr	r1, [pc, #52]	; (8000348 <NVIC_SetPriority+0x4c>)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 030f 	and.w	r3, r3, #15
 8000318:	3b04      	subs	r3, #4
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000326:	e009      	b.n	800033c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000328:	4908      	ldr	r1, [pc, #32]	; (800034c <NVIC_SetPriority+0x50>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	0112      	lsls	r2, r2, #4
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	440b      	add	r3, r1
 8000338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	e000e100 	.word	0xe000e100

08000350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3b01      	subs	r3, #1
 800035c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000360:	d301      	bcc.n	8000366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000362:	2301      	movs	r3, #1
 8000364:	e00f      	b.n	8000386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000366:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <SysTick_Config+0x40>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	3b01      	subs	r3, #1
 800036c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800036e:	210f      	movs	r1, #15
 8000370:	f04f 30ff 	mov.w	r0, #4294967295
 8000374:	f7ff ffc2 	bl	80002fc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <SysTick_Config+0x40>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037e:	4b04      	ldr	r3, [pc, #16]	; (8000390 <SysTick_Config+0x40>)
 8000380:	2207      	movs	r2, #7
 8000382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000384:	2300      	movs	r3, #0
}
 8000386:	4618      	mov	r0, r3
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	e000e010 	.word	0xe000e010

08000394 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  //int i = 0;

	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000398:	4a28      	ldr	r2, [pc, #160]	; (800043c <main+0xa8>)
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <main+0xa8>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	f043 0302 	orr.w	r3, r3, #2
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC -> APB2ENR = RCC_APB2ENR_SYSCFGEN;
 80003a4:	4b25      	ldr	r3, [pc, #148]	; (800043c <main+0xa8>)
 80003a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003aa:	645a      	str	r2, [r3, #68]	; 0x44
	gpio_pin_cfg(GPIOB, PB14, gpio_mode_output_PP_LS); //red led
 80003ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003b4:	4822      	ldr	r0, [pc, #136]	; (8000440 <main+0xac>)
 80003b6:	f7ff ff0f 	bl	80001d8 <gpio_pin_cfg>
	gpio_pin_cfg(GPIOB, PB15, gpio_mode_output_PP_LS); //green led
 80003ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c2:	481f      	ldr	r0, [pc, #124]	; (8000440 <main+0xac>)
 80003c4:	f7ff ff08 	bl	80001d8 <gpio_pin_cfg>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c8:	f3bf 8f4f 	dsb	sy
	__DSB();

	if (RCC -> CSR & RCC_CSR_WDGRSTF)
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <main+0xa8>)
 80003ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80003d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d00b      	beq.n	80003f0 <main+0x5c>
	  {
		  RCC -> CSR |= RCC_CSR_RMVF;
 80003d8:	4a18      	ldr	r2, [pc, #96]	; (800043c <main+0xa8>)
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <main+0xa8>)
 80003dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80003de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003e2:	6753      	str	r3, [r2, #116]	; 0x74
		  BB(GPIOB -> ODR, PB15) = 1;
 80003e4:	4b17      	ldr	r3, [pc, #92]	; (8000444 <main+0xb0>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	601a      	str	r2, [r3, #0]
		  BB(GPIOB -> ODR, PB14) = 0;
 80003ea:	4b17      	ldr	r3, [pc, #92]	; (8000448 <main+0xb4>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
	  }


	  BB(RCC->CSR, RCC_CSR_LSION) = 1;				//Enable LSI clock
 80003f0:	4b16      	ldr	r3, [pc, #88]	; (800044c <main+0xb8>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	601a      	str	r2, [r3, #0]
	  while ( BB(RCC->CSR, RCC_CSR_LSIRDY) == 0 );	//Wait for LSI clock start
 80003f6:	bf00      	nop
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <main+0xbc>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0fb      	beq.n	80003f8 <main+0x64>

	  WWDG -> CR |= WWDG_CR_WDGA;	//Watchdog enable
 8000400:	4a14      	ldr	r2, [pc, #80]	; (8000454 <main+0xc0>)
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <main+0xc0>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800040a:	6013      	str	r3, [r2, #0]

	  IWDG -> KR = 0x5555;			//Key register - enable access to PR and RLR registers
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <main+0xc4>)
 800040e:	f245 5255 	movw	r2, #21845	; 0x5555
 8000412:	601a      	str	r2, [r3, #0]
	  IWDG -> PR = 4;				//Prescaler
 8000414:	4b10      	ldr	r3, [pc, #64]	; (8000458 <main+0xc4>)
 8000416:	2204      	movs	r2, #4
 8000418:	605a      	str	r2, [r3, #4]
	  IWDG -> RLR = 1875;			//Reload Register
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <main+0xc4>)
 800041c:	f240 7253 	movw	r2, #1875	; 0x753
 8000420:	609a      	str	r2, [r3, #8]
	  IWDG -> KR = 0xaaaa;			//Load up value to watchdog R;
 8000422:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <main+0xc4>)
 8000424:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000428:	601a      	str	r2, [r3, #0]
	  IWDG -> KR = 0xcccc;			//Start watchdog
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <main+0xc4>)
 800042c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000430:	601a      	str	r2, [r3, #0]

	  SysTick_Config(160000);
 8000432:	480a      	ldr	r0, [pc, #40]	; (800045c <main+0xc8>)
 8000434:	f7ff ff8c 	bl	8000350 <SysTick_Config>

  /* Infinite loop */
  while (1)
 8000438:	e7fe      	b.n	8000438 <main+0xa4>
 800043a:	bf00      	nop
 800043c:	40023800 	.word	0x40023800
 8000440:	40020400 	.word	0x40020400
 8000444:	424082bc 	.word	0x424082bc
 8000448:	424082b8 	.word	0x424082b8
 800044c:	42470e80 	.word	0x42470e80
 8000450:	42470e84 	.word	0x42470e84
 8000454:	40002c00 	.word	0x40002c00
 8000458:	40003000 	.word	0x40003000
 800045c:	00027100 	.word	0x00027100

08000460 <SysTick_Handler>:

  }
}

__attribute__((interrupt)) void SysTick_Handler(void)
{
 8000460:	4668      	mov	r0, sp
 8000462:	f020 0107 	bic.w	r1, r0, #7
 8000466:	468d      	mov	sp, r1
 8000468:	b481      	push	{r0, r7}
 800046a:	af00      	add	r7, sp, #0
	reminder++;
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <SysTick_Handler+0x38>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <SysTick_Handler+0x38>)
 8000476:	701a      	strb	r2, [r3, #0]
	if (reminder == 200)
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <SysTick_Handler+0x38>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2bc8      	cmp	r3, #200	; 0xc8
 800047e:	d105      	bne.n	800048c <SysTick_Handler+0x2c>
	{
		BB(GPIOB -> ODR, PB14) = 1;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <SysTick_Handler+0x3c>)
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]
		 BB(GPIOB -> ODR, PB15) = 0;
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <SysTick_Handler+0x40>)
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
	}

}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc81      	pop	{r0, r7}
 8000492:	4685      	mov	sp, r0
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	2000001c 	.word	0x2000001c
 800049c:	424082b8 	.word	0x424082b8
 80004a0:	424082bc 	.word	0x424082bc

080004a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004aa:	e003      	b.n	80004b4 <LoopCopyDataInit>

080004ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004b2:	3104      	adds	r1, #4

080004b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004b4:	480b      	ldr	r0, [pc, #44]	; (80004e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004bc:	d3f6      	bcc.n	80004ac <CopyDataInit>
  ldr  r2, =_sbss
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004c0:	e002      	b.n	80004c8 <LoopFillZerobss>

080004c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004c4:	f842 3b04 	str.w	r3, [r2], #4

080004c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004cc:	d3f9      	bcc.n	80004c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004ce:	f000 f813 	bl	80004f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004d2:	f000 f847 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004d6:	f7ff ff5d 	bl	8000394 <main>
  bx  lr    
 80004da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004e0:	080005cc 	.word	0x080005cc
  ldr  r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004e8:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80004ec:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80004f0:	20000020 	.word	0x20000020

080004f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC_IRQHandler>
	...

080004f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004fc:	4a16      	ldr	r2, [pc, #88]	; (8000558 <SystemInit+0x60>)
 80004fe:	4b16      	ldr	r3, [pc, #88]	; (8000558 <SystemInit+0x60>)
 8000500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <SystemInit+0x64>)
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <SystemInit+0x64>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f043 0301 	orr.w	r3, r3, #1
 8000516:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <SystemInit+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800051e:	4a0f      	ldr	r2, [pc, #60]	; (800055c <SystemInit+0x64>)
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <SystemInit+0x64>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <SystemInit+0x64>)
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <SystemInit+0x68>)
 8000532:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000534:	4a09      	ldr	r2, [pc, #36]	; (800055c <SystemInit+0x64>)
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <SystemInit+0x64>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <SystemInit+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <SystemInit+0x60>)
 8000548:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800054c:	609a      	str	r2, [r3, #8]
#endif
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00
 800055c:	40023800 	.word	0x40023800
 8000560:	24003010 	.word	0x24003010

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	4e0d      	ldr	r6, [pc, #52]	; (800059c <__libc_init_array+0x38>)
 8000568:	4c0d      	ldr	r4, [pc, #52]	; (80005a0 <__libc_init_array+0x3c>)
 800056a:	1ba4      	subs	r4, r4, r6
 800056c:	10a4      	asrs	r4, r4, #2
 800056e:	2500      	movs	r5, #0
 8000570:	42a5      	cmp	r5, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	4e0b      	ldr	r6, [pc, #44]	; (80005a4 <__libc_init_array+0x40>)
 8000576:	4c0c      	ldr	r4, [pc, #48]	; (80005a8 <__libc_init_array+0x44>)
 8000578:	f000 f818 	bl	80005ac <_init>
 800057c:	1ba4      	subs	r4, r4, r6
 800057e:	10a4      	asrs	r4, r4, #2
 8000580:	2500      	movs	r5, #0
 8000582:	42a5      	cmp	r5, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800058c:	4798      	blx	r3
 800058e:	3501      	adds	r5, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000596:	4798      	blx	r3
 8000598:	3501      	adds	r5, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005c4 	.word	0x080005c4
 80005a0:	080005c4 	.word	0x080005c4
 80005a4:	080005c4 	.word	0x080005c4
 80005a8:	080005c8 	.word	0x080005c8

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
